import { useState, useEffect } from 'react';
import { Box, Button, FormControl, FormLabel, Input, VStack, Text, UnorderedList, ListItem } from '@chakra-ui/react';

export default function VulnerabilityScoring() {
  const [formData, setFormData] = useState({
    processName: '',
    likelihood: '',
    impact: '',
  });
  const [vulnerabilities, setVulnerabilities] = useState([]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/save-vulnerability', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify(formData),
      });
      if (response.ok) {
        fetchVulnerabilities();
        setFormData({ processName: '', likelihood: '', impact: '' });
      } else {
        throw new Error('Failed to save vulnerability');
      }
    } catch (error) {
      console.error('Error saving vulnerability:', error);
    }
  };

  const fetchVulnerabilities = async () => {
    try {
      const response = await fetch('/api/get-rankings', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      if (response.ok) {
        const data = await response.json();
        setVulnerabilities(data.vulnerabilities);
      } else {
        throw new Error('Failed to fetch vulnerabilities');
      }
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
    }
  };

  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  return (
    <Box>
      <form onSubmit={handleSubmit}>
        <VStack spacing={4} align="stretch">
          <FormControl>
            <FormLabel>Process/Dependency Name</FormLabel>
            <Input type="text" name="processName" value={formData.processName} onChange={handleInputChange} required />
          </FormControl>
          <FormControl>
            <FormLabel>Likelihood of Incident (0-4)</FormLabel>
            <Input type="number" name="likelihood" min="0" max="4" value={formData.likelihood} onChange={handleInputChange} required />
          </FormControl>
          <FormControl>
            <FormLabel>Impact of Incident (0-4)</FormLabel>
            <Input type="number" name="impact" min="0" max="4" value={formData.impact} onChange={handleInputChange} required />
          </FormControl>
          <Button type="submit" colorScheme="blue">Submit</Button>
        </VStack>
      </form>
      <Text mt={4} fontWeight="bold">Vulnerability Ranking:</Text>
      <UnorderedList>
        {vulnerabilities.map((v, index) => (
          <ListItem key={index}>{v.processName}: Score {v.vulnerabilityScore}</ListItem>
        ))}
      </UnorderedList>
    </Box>
  );
}
