// pages/api/recovery-workflow.js (Automate workflow creation)
import { getSession } from '@auth0/nextjs-auth0';
import connectDB from '../../config/database';
import RecoveryWorkflow from '../../models/RecoveryWorkflow';
import BusinessProcess from '../../models/BusinessProcess';

export default async function handler(req, res) {
  const session = await getSession(req, res);
  if (!session) {
    return res.status(401).json({ error: 'Not authenticated' });
  }

  await connectDB();

  switch (req.method) {
    case 'POST':
      try {
        const { businessProcessId } = req.body;

        const businessProcess = await BusinessProcess.findById(businessProcessId);

        if (!businessProcess) {
          return res.status(404).json({ success: false, error: 'Business process not found' });
        }

        // Logic to automatically generate recovery steps based on the business process
        const autoGeneratedSteps = generateRecoverySteps(businessProcess);

        const recoveryWorkflow = new RecoveryWorkflow({
          userId: session.user.sub,
          businessProcessId,
          recoverySteps: autoGeneratedSteps,
          isAutoGenerated: true
        });

        await recoveryWorkflow.save();
        res.status(201).json({ success: true, data: recoveryWorkflow });
      } catch (error) {
        res.status(400).json({ success: false, error: error.message });
      }
      break;

    case 'GET':
      try {
        const { businessProcessId } = req.query;
        const workflow = await RecoveryWorkflow.findOne({ businessProcessId, userId: session.user.sub });
        res.status(200).json({ success: true, data: workflow });
      } catch (error) {
        res.status(400).json({ success: false, error: error.message });
      }
      break;

    default:
      res.status(405).json({ success: false, error: 'Method not allowed' });
      break;
  }
}

function generateRecoverySteps(businessProcess) {
  // Example: Automatically generate steps based on business process dependencies and criticality
  const steps = [];

  steps.push({
    stepNumber: 1,
    description: `Notify the Crisis Management Team for ${businessProcess.name}`,
    responsibleTeam: 'Crisis Management Team',
    dependencies: {
      people: ['CMT members'],
      itApplications: [],
      devices: [],
      facilities: [],
      suppliers: []
    },
    estimatedCompletionTime: 1 // in hours
  });

  // More steps could be auto-generated based on the process type and dependencies
  // This can be extended to create steps based on more complex business logic
  businessProcess.dependencies.forEach((dependency, index) => {
    steps.push({
      stepNumber: index + 2,
      description: `Assess and recover ${dependency}`,
      responsibleTeam: businessProcess.criticalTeam || 'IT Recovery Team',
      dependencies: {
        people: businessProcess.criticalPeople || ['IT Staff'],
        itApplications: businessProcess.itApplications || [],
        devices: businessProcess.devices || [],
        facilities: businessProcess.facilities || [],
        suppliers: businessProcess.suppliers || []
      },
      estimatedCompletionTime: 2 // Example time
    });
  });

  return steps;
}
