// models/MaturityScorecard.js
import mongoose from 'mongoose';

const MaturityScorecardSchema = new mongoose.Schema({
  userId: { type: String, required: true },
  bcpScope: { type: Number, required: true },
  businessOperations: { type: Number, required: true },
  dependencies: { type: Number, required: true },
  alternativesForDependencies: { type: Number, required: true },
  legalAndRegulatoryRequirements: { type: Number, required: true },
  internalStakeholders: { type: Number, required: true },
  externalStakeholders: { type: Number, required: true },
  organizationalObjectives: { type: Number, required: true },
  biaProcess: { type: Number, required: true },
  biaConducted: { type: Number, required: true },
  rtosRposDefined: { type: Number, required: true },
  biaReviewed: { type: Number, required: true },
  incidentResponsePlans: { type: Number, required: true },
  recoveryPlanFlexibility: { type: Number, required: true },
  incidentResponseResources: { type: Number, required: true },
  interimProcesses: { type: Number, required: true },
  returnToNormalProcedures: { type: Number, required: true },
  bcPolicy: { type: Number, required: true },
  bcPolicyCommunication: { type: Number, required: true },
  bcmTeam: { type: Number, required: true },
  reviewMaintenancePlan: { type: Number, required: true },
  bcmsProjectPlan: { type: Number, required: true },
  riskManagement: { type: Number, required: true },
  riskAssessment: { type: Number, required: true },
  crisisCommunication: { type: Number, required: true },
  emergencyResponsePlans: { type: Number, required: true },
  crisisManagementPlans: { type: Number, required: true },
  crisisTesting: { type: Number, required: true },
  topManagementParticipation: { type: Number, required: true },
  bcTesting: { type: Number, required: true },
  testDocumentation: { type: Number, required: true },
  testReview: { type: Number, required: true },
  annualTesting: { type: Number, required: true },
  changeManagementProcedures: { type: Number, required: true },
  documentationSecurity: { type: Number, required: true },
  documentationVersionControl: { type: Number, required: true },
  externalDocumentationControl: { type: Number, required: true },
  overallMaturityScore: { type: Number },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

export default mongoose.models.MaturityScorecard || mongoose.model('MaturityScorecard', MaturityScorecardSchema);
