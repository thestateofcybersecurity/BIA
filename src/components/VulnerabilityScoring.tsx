import React, { useState, useEffect } from 'react'
import { Box, Button, FormControl, FormLabel, Input, VStack, Text, UnorderedList, ListItem, Select } from '@chakra-ui/react'
import axios from 'axios'
import { ProcessDependency } from '@/types/ProcessDependency'

interface Vulnerability {
  processName: string
  vulnerabilityScore: number
}

interface VulnerabilityScoringProps {
  processes: ProcessDependency[]
}

export default function VulnerabilityScoring({ processes }: VulnerabilityScoringProps) {
  const [formData, setFormData] = useState({
    processId: '',
    likelihood: '',
    impact: '',
  })
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target
    setFormData({ ...formData, [name]: value })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      await axios.post('/api/save-vulnerability', formData)
      fetchVulnerabilities()
      setFormData({ processId: '', likelihood: '', impact: '' })
    } catch (error) {
      console.error('Error saving vulnerability:', error)
    }
  }

  const fetchVulnerabilities = async () => {
    try {
      const response = await axios.get('/api/get-rankings')
      setVulnerabilities(response.data.vulnerabilities)
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error)
    }
  }

  useEffect(() => {
    fetchVulnerabilities()
  }, [])

  return (
    <Box>
      <form onSubmit={handleSubmit}>
        <VStack spacing={4} align="stretch">
          <FormControl>
            <FormLabel>Process/Dependency</FormLabel>
            <Select name="processId" value={formData.processId} onChange={handleInputChange} required>
              <option value="">Select a process</option>
              {processes.map((process) => (
                <option key={process.id} value={process.id}>{process.processFunction}</option>
              ))}
            </Select>
          </FormControl>
          <FormControl>
            <FormLabel>Likelihood of Incident (0-4)</FormLabel>
            <Input type="number" name="likelihood" min="0" max="4" value={formData.likelihood} onChange={handleInputChange} required />
          </FormControl>
          <FormControl>
            <FormLabel>Impact of Incident (0-4)</FormLabel>
            <Input type="number" name="impact" min="0" max="4" value={formData.impact} onChange={handleInputChange} required />
          </FormControl>
          <Button type="submit" colorScheme="blue">Submit</Button>
        </VStack>
      </Form>
      <Text mt={4} fontWeight="bold">Vulnerability Ranking:</Text>
      <UnorderedList>
        {vulnerabilities.map((v, index) => (
          <ListItem key={index}>{v.processName}: Score {v.vulnerabilityScore}</ListItem>
        ))}
      </UnorderedList>
    </Box>
  )
}
